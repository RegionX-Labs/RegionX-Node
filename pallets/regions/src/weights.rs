
//! Autogenerated weights for `pallet_regions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-04-19, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `94-130-55-124.ptr`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/regionx-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_regions
// --extrinsic
// *
// --steps
// 20
// --repeat
// 50
// --output
// ./pallets/regions/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn transfer() -> Weight;
	fn request_region_record() -> Weight;
}

/// Weight functions for `pallet_regions`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Regions::Regions` (r:1 w:1)
	/// Proof: `Regions::Regions` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3583`
		// Minimum execution time: 18_574_000 picoseconds.
		Weight::from_parts(28_954_000, 0)
			.saturating_add(Weight::from_parts(0, 3583))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Regions::Regions` (r:1 w:0)
	/// Proof: `Regions::Regions` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::LatestStateMachineHeight` (r:1 w:0)
	/// Proof: `Ismp::LatestStateMachineHeight` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::IntermediateNumberOfLeaves` (r:1 w:1)
	/// Proof: `Ismp::IntermediateNumberOfLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::IntermediateLeaves` (r:1 w:1)
	/// Proof: `Ismp::IntermediateLeaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::CounterForIntermediateLeaves` (r:1 w:1)
	/// Proof: `Ismp::CounterForIntermediateLeaves` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::MmrPositions` (r:0 w:1)
	/// Proof: `Ismp::MmrPositions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x103895530afb23bb607661426d55eb8bbd3caa596ab5c98b359f0ffc7d17e376` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x103895530afb23bb607661426d55eb8bbd3caa596ab5c98b359f0ffc7d17e376` (r:1 w:1)
	fn request_region_record() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `3856`
		// Minimum execution time: 58_634_000 picoseconds.
		Weight::from_parts(94_210_000, 0)
			.saturating_add(Weight::from_parts(0, 3856))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
}


impl WeightInfo for () {
/// Storage: `Regions::Regions` (r:1 w:1)
	/// Proof: `Regions::Regions` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3583`
		// Minimum execution time: 18_574_000 picoseconds.
		Weight::from_parts(28_954_000, 0)
			.saturating_add(Weight::from_parts(0, 3583))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Regions::Regions` (r:1 w:0)
	/// Proof: `Regions::Regions` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::LatestStateMachineHeight` (r:1 w:0)
	/// Proof: `Ismp::LatestStateMachineHeight` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::IntermediateNumberOfLeaves` (r:1 w:1)
	/// Proof: `Ismp::IntermediateNumberOfLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::IntermediateLeaves` (r:1 w:1)
	/// Proof: `Ismp::IntermediateLeaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::CounterForIntermediateLeaves` (r:1 w:1)
	/// Proof: `Ismp::CounterForIntermediateLeaves` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Ismp::MmrPositions` (r:0 w:1)
	/// Proof: `Ismp::MmrPositions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x103895530afb23bb607661426d55eb8bbd3caa596ab5c98b359f0ffc7d17e376` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x103895530afb23bb607661426d55eb8bbd3caa596ab5c98b359f0ffc7d17e376` (r:1 w:1)
	fn request_region_record() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `3856`
		// Minimum execution time: 58_634_000 picoseconds.
		Weight::from_parts(94_210_000, 0)
			.saturating_add(Weight::from_parts(0, 3856))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(6))
	}	
}